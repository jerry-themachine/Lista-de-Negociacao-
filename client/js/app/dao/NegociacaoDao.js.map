{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","onerror","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_banco","_pais","_data","_variacao","_bolsa","_codigo","_retorno","_cota","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKII,wBAAQI,SAAR,GAAoB,aAAK;;AAErBC,4BAAQC,GAAR,CAAY,iCAAZ;AACAR;AACH,iBAJD;;AAMAE,wBAAQO,OAAR,GAAkB,aAAK;;AAEnBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,uCAAP;AACH,iBAJD;AAMP,aAnBM,CAAP;AAoBH;;;qCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAAyDO,WAAzD,CAAqE,OAAKP,MAA1E,EAAkFiB,UAAlF,EAAb;;AAEA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;;AAEpB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,wBAAGD,KAAH,EAAU;;AAEN,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,MAApB,EAA4BJ,KAAKK,KAAjC,EAAwCL,KAAKM,KAA7C,EAAoDN,KAAKO,SAAzD,EAAoEP,KAAKQ,MAAzE,EAAiFR,KAAKS,OAAtF,EAA+FT,KAAKU,QAApG,EAA8GV,KAAKW,KAAnH,EAA0HX,KAAKY,MAA/H,CAAjB;;AAEAd,8BAAMe,QAAN;AAEH,qBAPD,MAOO;;AAEH/B,gCAAQe,WAAR;AACH;AACJ,iBAfD;;AAiBAF,uBAAOJ,OAAP,GAAiB,aAAK;;AAElBF,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAAT,CAAeoB,IAA3B;AACA/B,2BAAO,wCAAP;AACH,iBAJD;AAKH,aA5BM,CAAP;AA6BH;;;qCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAAyDO,WAAzD,CAAqE,OAAKP,MAA1E,EAAkFoC,KAAlF,EAAd;;AAEA/B,wBAAQI,SAAR,GAAqB,UAACI,CAAD,EAAO;AACxBV,4BAAQ,mCAAR;AACH,iBAFD;;AAIAE,wBAAQO,OAAR,GAAmB,UAACC,CAAD,EAAO;AACtBH,4BAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAZM,CAAP;AAaH;;;;;;AAIJ","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(connection) {\n        \n        this._connection = connection;\n        this._store = 'negociacoes';\n    };\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)               \n                .add(negociacao);\n\n                request.onsuccess = e => {\n\n                    console.log('Negociação inserida com sucesso');\n                    resolve();                    \n                };\n        \n                request.onerror = e => {\n        \n                    console.log(e.target.error);\n                    reject('Não foi possível inserir a negociação');\n                };\n\n        });\n    };\n\n    listaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            let cursor = this._connection.transaction([this._store], 'readwrite').objectStore(this._store).openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e => {\n\n                let atual = e.target.result;\n\n                if(atual) {\n\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._banco, dado._pais, dado._data, dado._variacao, dado._bolsa, dado._codigo, dado._retorno, dado._cota, dado._valor));\n\n                    atual.continue();\n\n                } else {\n\n                    resolve(negociacoes);\n                };\n            };\n\n            cursor.onerror = e => {\n\n                console.log(e.target.error.name);\n                reject('Não foi possível listar as negociações');\n            }; \n        });\n    };\n\n    apagaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            let request = this._connection.transaction([this._store], 'readwrite').objectStore(this._store).clear();\n\n            request.onsuccess = ((e) => {\n                resolve('Negociações deletadas com sucesso');                \n            });\n\n            request.onerror = ((e) => {\n                console.log(e.target.error);\n                reject('Não foi possível deletar as negociações')\n            });\n        })\n    }\n\n\n    \n};"]}