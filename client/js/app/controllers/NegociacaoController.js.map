{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","getElementById","bind","_inputBanco","_inputPais","_inputData","_inputVariacao","_inputBolsa","_inputCodigo","_inputRetorno","_inputCota","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_mensagem2","_ordemAtual","ConnectionFactory","getConnection","then","connection","NegociacaoDao","dao","listaTodos","negociacoes","forEach","negociacao","adiciona","catch","console","log","erro","texto","hh","mm","ss","th","tm","ts","setInterval","importaNegociacoes","timer","format","event","preventDefault","_criaNegociacao","_limpaFormulario","service","NegociacaoService","promiseSemanaAtual","obterNegociacoesDaSemanaAtual","promiseSemanaAnterior","obterNegociacoesDaSemanaAnterior","promiseSemanaRetrasada","obterNegociacoesDaSemanaRetrasada","Promise","all","filter","some","negociacaoExistente","JSON","stringfy","stringify","reduce","arrayAchatado","array","concat","text","apagaTodos","mensagem","esvazia","Negociacao","value","DateHelper","textoParaData","parseFloat","parseInt","toFixed","focus","coluna","inverte","ordena","a","b"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController{\n\n    constructor() {        \n\n        //transformando \"document.getElementById\" em uma variável => \"$\", através de \"bind\" ele irá manter a associação com \"document\"\n        let $ = document.getElementById.bind(document);\n          \n        //Atribuindo os id's do DOM à variáveis\n        this._inputBanco = $('banco');\n        this._inputPais = $('pais');\n        this._inputData = $('data');\n        this._inputVariacao = $('variacao');\n        this._inputBolsa = $('bolsa');\n        this._inputCodigo = $('codigo');\n        this._inputRetorno = $('retorno');\n        this._inputCota = $('cota');\n        this._inputValor = $('valor');     \n                          \n        \n        //Instanciando a classe Bind para chamar o padrão de projeto ProxyFactory que atualiza a ListaNegociacoes quando é inserida ou deletada uma nova negociação  \n        this._listaNegociacoes = new Bind(      // => (model, view, props)\n            new ListaNegociacoes(), // => (model)\n            \n            //Instanciando  a classe NegociacoesView\n            new NegociacoesView($('negociacoesView')), // => (view)\n            //['adiciona', 'esvazia'] => Retirado o sinal de array \"[]\" para uso do rest operator(...) na classe Bind\n            \n            'adiciona', 'esvazia', 'ordena', 'inverte' // => (props)\n            );\n                     \n\n        //Padrão de projeto ProxyFactory para atualizar a Mensagem quando inserido ou deletado uma nova negociação\n        \n       \n               \n        //Instanciando a classe Bind\n        this._mensagem = new Bind (      // => (model, view, props)\n            new Mensagem(), // => (model)\n            \n            //Instanciando a classe MensagemView\n            new MensagemView($('mensagemView')), // => (view)\n            //['texto'] => Retirado o sinal de array \"[]\" para uso do rest operator(...) na classe Bind\n\n            'texto' // => (props)\n        );\n\n         //Instanciando a classe Bind\n         this._mensagem2 = new Bind (      // => (model, view, props)\n         new Mensagem(), // => (model)\n         \n         //Instanciando a classe MensagemView\n         new MensagemView($('mensagemView2')), // => (view)\n         //['texto'] => Retirado o sinal de array \"[]\" para uso do rest operator(...) na classe Bind\n\n         'texto' // => (props)\n     );\n\n        //Com a página carregada não existirá critério, só existirá quando o usuário clicar nas colunas\n        this._ordemAtual = '';\n\n        ConnectionFactory\n            .getConnection()\n            .then((connection) => {\n            return new NegociacaoDao(connection)\n            })\n            .then((dao) => {\n            return dao.listaTodos()\n            })\n            .then((negociacoes) => {\n                return negociacoes.forEach((negociacao) => \n                    this._listaNegociacoes.adiciona(negociacao))\n            })\n            .catch(erro => {\n                console.log(erro)\n                this._mensagem.texto = erro\n            });\n\n\n        //Método para o usuário atualizar as importações através do botão \"Atulizar Lista\"   \n        \n        let hh = 0;\n        let mm = 0;\n        let ss = 0;\n        let th = '';\n        let tm = '';\n        let ts = '';      \n\n\n        setInterval(() => { \n\n            this.importaNegociacoes();\n            this._mensagem2.texto = timer();                    \n                            \n        }, 1000);  \n        \n        \n\n        function timer() {\n\n            //MensagemView2 com informações em hora/min/seg sobre a útlima atualização executada \n            if(ss <= 60){\n                ts = 'segundos';                \n            }else if(ss == 0){\n                ts = '';\n            }\n\n            if((mm >= 1) && (mm <= 60)){\n                ts = '';\n                tm = 'minutos';                    \n            }\n\n            if((hh == 1)){\n                tm = '';\n                ts = '';\n                th = 'hora';                       \n            } else if(hh >= 2){                        \n                tm = '';\n                ts = '';\n                th = 'horas'\n            }\n\n\n            //cronômetro\n            ss++;\n            if(ss == 60) {\n                ss = 0;\n                mm++;\n                if(mm == 60){\n                    mm = 0;\n                    hh++;                   \n\n                }\n            }\n           \n            \n            let format = `Lista de negociações atualizada há ${hh < 10 ? '0' + hh:hh}:${mm < 10 ? '0' + mm:mm}:${ss < 10 ? '0' + ss:ss} ${ts}${tm}${th}`;\n            return format;\n        }                                    \n    };\n    \n    //Método para adicionar negociação \n    adiciona(event){\n\n        event.preventDefault();      \n\n        ConnectionFactory.getConnection().then(connection => {\n\n            let negociacao = this._criaNegociacao();\n\n            new NegociacaoDao(connection).adiciona(negociacao).then(() => {\n                    this._listaNegociacoes.adiciona(negociacao);\n                    this._mensagem.texto = 'Negociação inserida com sucesso';\n                    this._limpaFormulario();\n\n                })\n        }).catch(erro => this._mensagem.texto = erro);   \n    };\n\n\n    //Método para importar negociações \n    importaNegociacoes() {\n        \n        let service = new NegociacaoService();\n\n        let promiseSemanaAtual = service.obterNegociacoesDaSemanaAtual();\n        let promiseSemanaAnterior = service.obterNegociacoesDaSemanaAnterior();\n        let promiseSemanaRetrasada = service.obterNegociacoesDaSemanaRetrasada();\n\n        //Resolvendo as promises na ordem especificada\n        Promise.all([\n            promiseSemanaAtual, \n            promiseSemanaAnterior, \n            promiseSemanaRetrasada]\n            )\n        \n        .then((negociacoes) => {\n\n            return negociacoes.filter((negociacao) => {\n\n                return !this._listaNegociacoes.negociacoes.some((negociacaoExistente) => {\n\n                    return JSON.stringfy(negociacao) == JSON.stringify(negociacaoExistente)\n                })\n            })\n        })\n        .then((negociacoes) => {            \n            negociacoes\n            .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\n            .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\n            this._mensagem.texto = 'Negociações importadas com sucesso'; \n        })\n        .catch((erro) => {\n            this._mensagem.text = erro;\n        });\n                                                                           \n    };\n\n    //Método para deletar lista de negociações\n    apaga() {\n\n        ConnectionFactory\n        .getConnection()\n        .then((connection) => {\n            return new NegociacaoDao(connection);\n        })\n        .then((dao) => {\n            return dao.apagaTodos();\n        })\n        .then((mensagem) => {\n            this._mensagem.texto = mensagem;\n            this._listaNegociacoes.esvazia();\n        });\n\n\n        this._listaNegociacoes.esvazia();        \n\n        this._mensagem.texto = 'Negociações deletadas com sucesso';\n        //this._mensagemView.update(this._mensagem);//Foi para o ProxyFactory\n\n    };\n\n    //Método para criar negociação com base nos valores dos dados obtidos através do formulário\n    _criaNegociacao() {\n\n        return new Negociacao(\n            this._inputBanco.value,\n            this._inputPais.value,\n            DateHelper.textoParaData(this._inputData.value),\n            parseFloat(this._inputVariacao.value),\n            this._inputBolsa.value,\n            this._inputCodigo.value,\n            parseFloat(this._inputRetorno.value),\n            parseInt(this._inputCota.value),\n            parseFloat(this._inputValor.value));\n    };\n\n    //Método para limpeza do formulário preenchido e após ser submetido\n    _limpaFormulario() {\n\n        this._inputBanco.value = '';\n        this._inputPais.value = '';\n        this._inputData.value = '';\n        this._inputVariacao.value = 0.000.toFixed(3);\n        this._inputBolsa.value = '';\n        this._inputCodigo.value = '';\n        this._inputRetorno.value = 0.000.toFixed(3);;\n        this._inputCota.value = 1;\n        this._inputValor.value = 0.000.toFixed(3);\n\n        this._inputBanco.focus(); \n    };\n    \n    //Método para ordenar a lista de negociações, renderizando-a através da interação do usuário com cliques\n    ordena(coluna) {\n\n        if(this._ordemAtual == coluna) {\n            this._listaNegociacoes.inverte();\n        }else {\n            this._listaNegociacoes.ordena((a,b) => a[coluna] - b[coluna]);\n        };\n\n        this._ordemAtual = coluna;\n        \n    };\n   \n};\n\n\n\n\n\n"]}